// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Kmat
arma::mat Kmat(int P, double v);
RcppExport SEXP _mhrcmxIntDep_Kmat(SEXP PSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Kmat(P, v));
    return rcpp_result_gen;
END_RCPP
}
// mhrcmx_dep_rep_int
Rcpp::List mhrcmx_dep_rep_int(const Rcpp::List Y, const int D, const arma::mat X, const arma::vec mu_alpha, const arma::mat S_alpha, const arma::Mat<double> Xcon, const arma::Mat<int> Xcat, const int p, const int n_theta, const double v, const double a0, const double b0, const double as, const double bs, const double at, const double bt, const double at0, const double bt0, const double A, const double lam2_min, const double Asig, const double dof, const double eta, const double eta0, const double s2mu, const double s02, const double M, const int ns, const int thin, const int burn, const int H0, int J, const double alpha_dir, int repulsive, double eps, double eps0, const double phi, const double nu, const double r, const int theta_sampler, const int nadapt, const double alpha_cat, const double m0, const double v0, const int only_nclr, const int H_out, const int SM, const int nGS);
RcppExport SEXP _mhrcmxIntDep_mhrcmx_dep_rep_int(SEXP YSEXP, SEXP DSEXP, SEXP XSEXP, SEXP mu_alphaSEXP, SEXP S_alphaSEXP, SEXP XconSEXP, SEXP XcatSEXP, SEXP pSEXP, SEXP n_thetaSEXP, SEXP vSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP asSEXP, SEXP bsSEXP, SEXP atSEXP, SEXP btSEXP, SEXP at0SEXP, SEXP bt0SEXP, SEXP ASEXP, SEXP lam2_minSEXP, SEXP AsigSEXP, SEXP dofSEXP, SEXP etaSEXP, SEXP eta0SEXP, SEXP s2muSEXP, SEXP s02SEXP, SEXP MSEXP, SEXP nsSEXP, SEXP thinSEXP, SEXP burnSEXP, SEXP H0SEXP, SEXP JSEXP, SEXP alpha_dirSEXP, SEXP repulsiveSEXP, SEXP epsSEXP, SEXP eps0SEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP rSEXP, SEXP theta_samplerSEXP, SEXP nadaptSEXP, SEXP alpha_catSEXP, SEXP m0SEXP, SEXP v0SEXP, SEXP only_nclrSEXP, SEXP H_outSEXP, SEXP SMSEXP, SEXP nGSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu_alpha(mu_alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S_alpha(S_alphaSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double> >::type Xcon(XconSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type Xcat(XcatSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type n_theta(n_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type as(asSEXP);
    Rcpp::traits::input_parameter< const double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const double >::type at(atSEXP);
    Rcpp::traits::input_parameter< const double >::type bt(btSEXP);
    Rcpp::traits::input_parameter< const double >::type at0(at0SEXP);
    Rcpp::traits::input_parameter< const double >::type bt0(bt0SEXP);
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type lam2_min(lam2_minSEXP);
    Rcpp::traits::input_parameter< const double >::type Asig(AsigSEXP);
    Rcpp::traits::input_parameter< const double >::type dof(dofSEXP);
    Rcpp::traits::input_parameter< const double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double >::type eta0(eta0SEXP);
    Rcpp::traits::input_parameter< const double >::type s2mu(s2muSEXP);
    Rcpp::traits::input_parameter< const double >::type s02(s02SEXP);
    Rcpp::traits::input_parameter< const double >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int >::type H0(H0SEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_dir(alpha_dirSEXP);
    Rcpp::traits::input_parameter< int >::type repulsive(repulsiveSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps0(eps0SEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int >::type theta_sampler(theta_samplerSEXP);
    Rcpp::traits::input_parameter< const int >::type nadapt(nadaptSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_cat(alpha_catSEXP);
    Rcpp::traits::input_parameter< const double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const int >::type only_nclr(only_nclrSEXP);
    Rcpp::traits::input_parameter< const int >::type H_out(H_outSEXP);
    Rcpp::traits::input_parameter< const int >::type SM(SMSEXP);
    Rcpp::traits::input_parameter< const int >::type nGS(nGSSEXP);
    rcpp_result_gen = Rcpp::wrap(mhrcmx_dep_rep_int(Y, D, X, mu_alpha, S_alpha, Xcon, Xcat, p, n_theta, v, a0, b0, as, bs, at, bt, at0, bt0, A, lam2_min, Asig, dof, eta, eta0, s2mu, s02, M, ns, thin, burn, H0, J, alpha_dir, repulsive, eps, eps0, phi, nu, r, theta_sampler, nadapt, alpha_cat, m0, v0, only_nclr, H_out, SM, nGS));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _mhrcmxIntDep_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mhrcmxIntDep_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mhrcmxIntDep_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mhrcmxIntDep_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// rgamma_ars
double rgamma_ars(const double L, const double Lu, const double a, const double b);
RcppExport SEXP _mhrcmxIntDep_rgamma_ars(SEXP LSEXP, SEXP LuSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type Lu(LuSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rgamma_ars(L, Lu, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mhrcmxIntDep_Kmat", (DL_FUNC) &_mhrcmxIntDep_Kmat, 2},
    {"_mhrcmxIntDep_mhrcmx_dep_rep_int", (DL_FUNC) &_mhrcmxIntDep_mhrcmx_dep_rep_int, 48},
    {"_mhrcmxIntDep_rcpparma_hello_world", (DL_FUNC) &_mhrcmxIntDep_rcpparma_hello_world, 0},
    {"_mhrcmxIntDep_rcpparma_outerproduct", (DL_FUNC) &_mhrcmxIntDep_rcpparma_outerproduct, 1},
    {"_mhrcmxIntDep_rcpparma_innerproduct", (DL_FUNC) &_mhrcmxIntDep_rcpparma_innerproduct, 1},
    {"_mhrcmxIntDep_rcpparma_bothproducts", (DL_FUNC) &_mhrcmxIntDep_rcpparma_bothproducts, 1},
    {"_mhrcmxIntDep_rgamma_ars", (DL_FUNC) &_mhrcmxIntDep_rgamma_ars, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mhrcmxIntDep(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
